<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Liferay on xrazis · Haris Razis</title>
    <link>https://haris.razis.com/tags/liferay/</link>
    <description>Recent content in Liferay on xrazis · Haris Razis</description>
    <image>
      <title>xrazis · Haris Razis</title>
      <url>https://haris.razis.com/</url>
      <link>https://haris.razis.com/</link>
    </image>
    <generator>Hugo -- 0.139.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Sep 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://haris.razis.com/tags/liferay/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to build a React Portlet on Liferay 7.2 with widgets</title>
      <link>https://haris.razis.com/posts/liferay-widgets-react/</link>
      <pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://haris.razis.com/posts/liferay-widgets-react/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;At my day job we decided to rewrite a Liferay portlet to React, it displays draws and results data from different
numeric games (the client is a betting company slowly porting many of their games online). This particular portlet has
been a pain in the ass to maintain, port new CRs, and was horrible performance wise, and that is because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The code was inherited from another company and was written a long time ago with questionable structure/logic. There
was never enough time to do a proper cleanup or rewrite.&lt;/li&gt;
&lt;li&gt;It tries to handle many different numeric games and in turn the code ends up being incomprehensible and bug prone.&lt;/li&gt;
&lt;li&gt;It has many expensive DOM operations.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;react-application&#34;&gt;React Application&lt;/h1&gt;
&lt;p&gt;Developing the React application standalone and outside of Liferay is a huge boost of productivity as you can take
advantage of features like live reloading and your IDE&amp;rsquo;s debugger. This particular project is based on a monolithic
architecture with no direct communication to the server from the client (ex websockets). It is tightly coupled with
third party vendors and much of the information displayed comes from APIs that other teams use as well (ex mobile
vendor). Some of the API calls happen at the backend at a predefined interval, this way the endpoint does not get
bottled down from requests. That information is exposed to a window variable so that specific context can be
accessible from different parts of the application.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
